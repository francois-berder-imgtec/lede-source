From 3c9e8d9d68617d90d1dc67436c9568b82597b831 Mon Sep 17 00:00:00 2001
From: Naidu Tellapati <Naidu.Tellapati@imgtec.com>
Date: Tue, 9 Jun 2015 07:42:29 +0100
Subject: [PATCH 13/25] efuse: Imagination Technologies Generic eFuse
 Controller

The Pistachio SoC from Imagination Technologies includes a generic eFuse
Controller which exposes the status of 128 EFUSE bits to the external world.
(picked from https://www.mail-archive.com/devicetree@vger.kernel.org/msg51961.html)

Change-Id: If1991e3b879b3b9a3e2d0cac743bc8a35ab049bd
Signed-off-by: Arul Ramasamy <Arul.Ramasamy@imgtec.com>
Signed-off-by: Jude Abraham <Jude.Abraham@imgtec.com>
Signed-off-by: Naidu Tellapati <Naidu.Tellapati@imgtec.com>
Signed-off-by: Ezequiel Garcia <ezequiel.garcia@imgtec.com>
---
 .../devicetree/bindings/soc/img/img-efuse.txt      |  26 +++
 drivers/soc/Kconfig                                |   1 +
 drivers/soc/Makefile                               |   1 +
 drivers/soc/img/Kconfig                            |  16 ++
 drivers/soc/img/Makefile                           |   1 +
 drivers/soc/img/fuse/Makefile                      |   1 +
 drivers/soc/img/fuse/img-efuse.c                   | 201 +++++++++++++++++++++
 include/soc/img/img-efuse.h                        |  15 ++
 8 files changed, 262 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/soc/img/img-efuse.txt
 create mode 100644 drivers/soc/img/Kconfig
 create mode 100644 drivers/soc/img/Makefile
 create mode 100644 drivers/soc/img/fuse/Makefile
 create mode 100644 drivers/soc/img/fuse/img-efuse.c
 create mode 100644 include/soc/img/img-efuse.h

--- /dev/null
+++ b/Documentation/devicetree/bindings/soc/img/img-efuse.txt
@@ -0,0 +1,26 @@
+* Imagination Technologies Generic eFuse controller
+
+Required properties:
+- compatible: Must be "img,pistachio-efuse".
+- reg: Must contain the base address and length of the eFuse registers.
+
+Optional properties:
+- clocks: Must contain an entry for each entry in clock-names.
+  See ../clock/clock-bindings.txt for details.
+- clock-names: Must include the following entries:
+  - osc: External oscillator clock
+  - sys: eFuse register interface clock
+
+Example:
+efuse: efuse@18149200 {
+	compatible = "img,pistachio-efuse";
+	reg = <0x18149200 0x200>;
+};
+
+Example with optional clock properties:
+efuse: efuse@18149200 {
+	compatible = "img,pistachio-efuse";
+	reg = <0x18149200 0x200>;
+	clocks = <&osc>, <&system_clk>;
+	clock-names = "osc", "sys";
+};
--- a/drivers/soc/Kconfig
+++ b/drivers/soc/Kconfig
@@ -1,6 +1,7 @@
 menu "SOC (System On Chip) specific Drivers"
 
 source "drivers/soc/brcmstb/Kconfig"
+source "drivers/soc/img/Kconfig"
 source "drivers/soc/mediatek/Kconfig"
 source "drivers/soc/qcom/Kconfig"
 source "drivers/soc/rockchip/Kconfig"
--- a/drivers/soc/Makefile
+++ b/drivers/soc/Makefile
@@ -3,6 +3,7 @@
 #
 
 obj-$(CONFIG_SOC_BRCMSTB)	+= brcmstb/
+obj-$(CONFIG_SOC_IMG)           += img/
 obj-$(CONFIG_MACH_DOVE)		+= dove/
 obj-$(CONFIG_ARCH_MEDIATEK)	+= mediatek/
 obj-$(CONFIG_ARCH_QCOM)		+= qcom/
--- /dev/null
+++ b/drivers/soc/img/Kconfig
@@ -0,0 +1,16 @@
+menuconfig SOC_IMG
+        bool "IMG SOC drivers support"
+
+if SOC_IMG
+
+config IMG_EFUSE
+	tristate "Imagination Technologies Generic eFuse driver"
+	depends on HAS_IOMEM
+	help
+	  Imagination Technologies Generic eFuse driver which exposes the status
+	  of 128 EFUSE bits.
+
+	  To compile this driver as a module, choose M here: the module will
+	  be called img-efuse.
+
+endif # SOC_IMG
--- /dev/null
+++ b/drivers/soc/img/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_SOC_IMG)	+= fuse/
--- /dev/null
+++ b/drivers/soc/img/fuse/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_IMG_EFUSE)	+= img-efuse.o
--- /dev/null
+++ b/drivers/soc/img/fuse/img-efuse.c
@@ -0,0 +1,201 @@
+/*
+ * Imagination Technologies Generic eFuse driver
+ *
+ * Copyright (c) 2015 Imagination Technologies Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ *
+ * Based on drivers/misc/eeprom/sunxi_sid.c Copyright (c) 2013 Oliver Schinagl
+ */
+#include <linux/clk.h>
+#include <linux/compiler.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/export.h>
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/kobject.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/stat.h>
+#include <linux/sysfs.h>
+#include <linux/types.h>
+
+#include <soc/img/img-efuse.h>
+
+struct img_efuse_soc_data {
+	unsigned int size;
+};
+
+struct img_efuse {
+	void __iomem *base;
+	const struct img_efuse_soc_data *data;
+	struct clk *osc_clk;
+	struct clk *sys_clk;
+};
+
+static struct img_efuse *efuse_dev;
+static bool efuse_initialized;
+
+static u8 img_efuse_read_byte(unsigned int offset)
+{
+	u32 data;
+
+	if (offset >= efuse_dev->data->size)
+		return 0;
+
+	data = readl(efuse_dev->base + round_down(offset, 4));
+	data = (data >> ((offset % 4) * 8))  && 0xff;
+
+	return data;
+}
+
+int img_efuse_readl(unsigned int offset, u32 *value)
+{
+	if (!efuse_initialized)
+		return -ENODEV;
+
+	if ((offset > (efuse_dev->data->size - 4)) || (offset % 4 != 0))
+		return -EINVAL;
+
+	*value = readl(efuse_dev->base + offset);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(img_efuse_readl);
+
+static ssize_t img_efuse_read(struct file *fd, struct kobject *kobj,
+			      struct bin_attribute *attr, char *buf,
+			      loff_t pos, size_t size)
+{
+	int i;
+	struct platform_device *pdev;
+	struct img_efuse *efuse;
+
+	pdev = to_platform_device(kobj_to_dev(kobj));
+	efuse = platform_get_drvdata(pdev);
+
+	if (pos < 0 || pos >= efuse->data->size)
+		return 0;
+
+	if (size > efuse->data->size - pos)
+		size = efuse->data->size - pos;
+
+	for (i = 0; i < size; i++)
+		buf[i] = img_efuse_read_byte(pos + i);
+
+	return i;
+}
+
+static struct bin_attribute img_efuse_bin_attr = {
+	.attr = { .name = "efuse", .mode = S_IRUGO, },
+	.read = img_efuse_read,
+};
+
+static const struct img_efuse_soc_data pistachio_efuse = {
+	.size = 16,
+};
+
+static const struct of_device_id img_efuse_of_match[] = {
+	{ .compatible = "img,pistachio-efuse", .data = &pistachio_efuse },
+	{},
+};
+MODULE_DEVICE_TABLE(of, img_efuse_of_match);
+
+static int img_efuse_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct resource *res;
+	const struct of_device_id *of_dev_id;
+
+	efuse_dev = devm_kzalloc(&pdev->dev, sizeof(struct img_efuse *),
+				 GFP_KERNEL);
+	if (!efuse_dev)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	efuse_dev->base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(efuse_dev->base))
+		return PTR_ERR(efuse_dev->base);
+
+	of_dev_id = of_match_device(img_efuse_of_match, &pdev->dev);
+	if (!of_dev_id)
+		return -ENODEV;
+	efuse_dev->data = of_dev_id->data;
+
+	efuse_dev->sys_clk = devm_clk_get(&pdev->dev, "sys");
+	if (!IS_ERR(efuse_dev->sys_clk)) {
+		ret = clk_prepare_enable(efuse_dev->sys_clk);
+		if (ret < 0) {
+			dev_err(&pdev->dev, "could not enable system clock\n");
+			return ret;
+		}
+	}
+
+	efuse_dev->osc_clk = devm_clk_get(&pdev->dev, "osc");
+	if (!IS_ERR(efuse_dev->osc_clk)) {
+		ret = clk_prepare_enable(efuse_dev->osc_clk);
+		if (ret < 0) {
+			dev_err(&pdev->dev,
+				"could not enable oscillator clock\n");
+			goto disable_sysclk;
+		}
+	}
+
+	platform_set_drvdata(pdev, efuse_dev);
+
+	img_efuse_bin_attr.size = efuse_dev->data->size;
+	if (device_create_bin_file(&pdev->dev, &img_efuse_bin_attr)) {
+		ret = -ENODEV;
+		goto disable_oscclk;
+	}
+
+	efuse_initialized = true;
+
+	return 0;
+
+disable_oscclk:
+	if (!IS_ERR(efuse_dev->osc_clk))
+		clk_disable_unprepare(efuse_dev->osc_clk);
+disable_sysclk:
+	if (!IS_ERR(efuse_dev->sys_clk))
+		clk_disable_unprepare(efuse_dev->sys_clk);
+
+	return ret;
+}
+
+static int img_efuse_remove(struct platform_device *pdev)
+{
+	struct img_efuse *efuse = platform_get_drvdata(pdev);
+
+	efuse_initialized = false;
+	device_remove_bin_file(&pdev->dev, &img_efuse_bin_attr);
+
+	if (!IS_ERR(efuse->osc_clk))
+		clk_disable_unprepare(efuse->osc_clk);
+
+	if (!IS_ERR(efuse->sys_clk))
+		clk_disable_unprepare(efuse->sys_clk);
+
+	return 0;
+}
+
+static struct platform_driver img_efuse_driver = {
+	.probe = img_efuse_probe,
+	.remove = img_efuse_remove,
+	.driver = {
+		.name = "img-efuse",
+		.of_match_table = img_efuse_of_match,
+	},
+};
+module_platform_driver(img_efuse_driver);
+
+MODULE_AUTHOR("Arul Ramasamy<Arul.Ramasamy@imgtec.com>");
+MODULE_AUTHOR("Jude Abraham<Jude.Abraham@imgtec.com>");
+MODULE_DESCRIPTION("Imagination Technologies Generic eFuse driver");
+MODULE_LICENSE("GPL v2");
--- /dev/null
+++ b/include/soc/img/img-efuse.h
@@ -0,0 +1,15 @@
+/*
+ * Imagination Technologies Generic eFuse driver
+ *
+ * Copyright (C) 2014 Imagination Technologies Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef __IMG_EFUSE_H
+#define __IMG_EFUSE_H
+
+int img_efuse_readl(unsigned int offset, u32 *value);
+
+#endif
